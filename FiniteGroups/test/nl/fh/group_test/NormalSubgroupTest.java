/*
 * Copyright (C) 2020 Frank Hoogeveen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package nl.fh.group_test;

import java.util.ArrayList;
import java.util.List;
import nl.fh.group.Element;
import nl.fh.group.Group;
import nl.fh.group.SubgroupDefinition;
import nl.fh.group_def_permutation.PermutationElement;
import nl.fh.group_definition_factory.GroupDefinitionFactory;
import nl.fh.group_info_calculators.GroupProperty;
import nl.fh.info_table.InfoTableException;
import nl.fh.info_table_values.BooleanValue;
import nl.fh.info_table_values.IntArray1dValue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author frank
 */
public class NormalSubgroupTest {
    
    @Test
    public void C3isNormalinD3Test() throws InfoTableException{
        GroupDefinitionFactory fac = new GroupDefinitionFactory();
        Group d3 = new Group(fac.getDihedralGroup(3));
        
        
        // construct the subgroup as the subgroup generated by elements of order 3
        IntArray1dValue val = (IntArray1dValue)(d3.getInfo().getValue(GroupProperty.ElementOrders));
        int[] orders = val.content();
        
        List<Element> list = new ArrayList<Element>();
        for(int i = 0; i < orders.length; i++){
            if(orders[i] == 3){
                list.add(d3.getElements().get(i));
            }
        }
        
        Group sub = new Group(new SubgroupDefinition(d3.getDefinition(), list));
        
        //check that this is a normal subgroup
        boolean isNormal = ((BooleanValue)(sub.getInfo().getValue(GroupProperty.IsNormal))).content();
        assertTrue(isNormal);
    }
    
    @Test
    public void S3isNotNormalinS4Test() throws InfoTableException{
        GroupDefinitionFactory fac = new GroupDefinitionFactory();
        Group s4 = new Group(fac.getSymmetricGroup(4));
        
        // construct the subgroup as the subgroup generated by elements that fix 0
        List<Element> list = new ArrayList<Element>();
        for(Element e : s4.getElements()){
            if(((PermutationElement) e).getPermutation()[0] == 0){
                list.add(e);
            }
        }
        
        Group sub = new Group(new SubgroupDefinition(s4.getDefinition(), list));
        
        //check that this is not a normal subgroup
        boolean isNormal = ((BooleanValue)(sub.getInfo().getValue(GroupProperty.IsNormal))).content();
        assertFalse(isNormal);
    }
    
}
